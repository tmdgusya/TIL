JVM 은 바이트 코드를 실행한 표준이다. 그리고 특정 밴더가 구현한 JVM 을 이용한다
뭐 JVM 을 구현한 밴더들은 대표적으로 오라클, 아마존 등등 이 있다.

바이트 코드를 확인하는법

```shell
javac HelloJava.java
javap -c HelloJava
```

JVM 은 플랫폼에 종속적이다 왜냐면 Native 코드로 변환되어 실행시켜야되는데, 그건 OS 환경에 맞춰서 실행시켜야 되기때문에

JVM 자체로 배포되지 않고, JRE 로 배포됨

JRE 의 목표는 자바 애플리케이션을 실행할 수 있도록 구성된 배포판(바이트 코드를 실행시키려면 반드시 필요함. 자바의 핵심 라이브러리가 거의다 들어있음)
하지만 자바를 개발하는데 제공하는 툴은 없음 그건 JDK 임

그니까 실행시킬때 java Hello.java 로쓰는건 들어있는데 컴파일할때 쓰이는 javac Hello.java 는 JDK 에 있음

JDK = JRE + 개발에 필요한 툴 (이제 자바 11부터는 그래서 JDK 만 제공함)

자바 11부터 모듈화가 진행됬는데 우리가 Jlink 를 통해서 작은 JRE 를 만들 수 있음

우리가 위에서 말했듯이 자바랑 JDK 즉 이걸 뭉뜽그려서 말하면 안됨, 왜냐면 자바는 유료냐? 라고 하면 오라클벤더에서 구현한 JVM 이 유료인거지

아마존 벤더가 구현한 JVM 을 쓰면 무료다. 그니까 자바가 유료다 라고 말하면 안되고, 오라클 벤더가 구현한 JVM 을 이용한 JDK 가 유료다! 라고 말해야 되는것이다.

최초의 JVM 은 자바언어를 구현하기 위해 만들어졌으나, 이게 결국 클래스파일만 있으면 동작하기에 다른 언어로 적고 컴파일했을때 java 파일이나 class 파일을 생성해두면 JVM 을 이용할 수 있음. 그렇게 파생된 언어들이 코틀린, 그루비 등등임. 실제 코틀린도 컴파일 해보면 클래스 파일이 나오는 걸 알 수 있다. 그래서 그 컴파일된 클래스를 우리가 자바 바이트코드를 보듯이 이제 javap 를 통해서 열어보면 확인할 수 있음을 알 수 있다. 즉 JVM 이 다년간 쌓아놓은 노하우를 이용하기 위해 JVM에 맞춰 개발된 것이다.
코틀린 컴파일을 하는 방법은 아래와 같다.
```
kotlinc Hello.kt
```
그런데 위와 같이 java 로 class 파일을 열수 없으므로 그래서 코틀린에서 권장하는 방법은

```
kotlinc Hello.kt -include-runtime -d Hello.jar 
```
jar 파일은 java Archaive 파일이므로, 이렇게 하면 java 로 실행 가능하다.

그니까 여기서 알 수 있는건 코틀린이 무료여서 가야된다는게 말이안된다는 뜻이다 ㅋㅋ

그니까 코틀린도 결국 JVM 을 이용하는데 오라클이 구현한 JVM 벤더를 쓰는 코틀린이라면 그냥 유료라는 것이다.

자바에 대한 이해도를 점점 넓혀 나가는것 같아 기분이좋다.